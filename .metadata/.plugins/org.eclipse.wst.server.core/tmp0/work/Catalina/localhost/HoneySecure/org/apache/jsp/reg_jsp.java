/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-04-25 19:26:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class reg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\" />\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\r\n");
      out.write("  <title>Register</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    :root {\r\n");
      out.write("      --clr-bg: linear-gradient(to right, #155799, #159957);\r\n");
      out.write("      --clr-container: rgba(255, 255, 255, 0.1);\r\n");
      out.write("      --clr-border: rgba(255, 255, 255, 0.2);\r\n");
      out.write("      --clr-text: #fff;\r\n");
      out.write("      --clr-placeholder: #eee;\r\n");
      out.write("      --clr-btn: #fff;\r\n");
      out.write("      --clr-btn-text: #111;\r\n");
      out.write("      --clr-btn-hover: #fff;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    * {\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 0;\r\n");
      out.write("      box-sizing: border-box;\r\n");
      out.write("      font-family: \"Inter\", sans-serif;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    body {\r\n");
      out.write("      background: var(--clr-bg);\r\n");
      out.write("      min-height: 100vh;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      color: var(--clr-text);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .register-box {\r\n");
      out.write("      background: var(--clr-container);\r\n");
      out.write("      border: 1px solid var(--clr-border);\r\n");
      out.write("      backdrop-filter: blur(15px);\r\n");
      out.write("      border-radius: 2rem;\r\n");
      out.write("      padding: 2rem 3rem;\r\n");
      out.write("      width: min(90%, 400px);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    h2 {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      margin-bottom: 1.5rem;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-group {\r\n");
      out.write("      margin-bottom: 1rem;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input[type=\"text\"],\r\n");
      out.write("    input[type=\"email\"],\r\n");
      out.write("    input[type=\"password\"] {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      padding: 0.8rem;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-bottom: 2px solid var(--clr-border);\r\n");
      out.write("      background: transparent;\r\n");
      out.write("      color: var(--clr-text);\r\n");
      out.write("      font-size: 1rem;\r\n");
      out.write("      outline: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    input::placeholder {\r\n");
      out.write("      color: var(--clr-placeholder);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-check {\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      gap: 0.5rem;\r\n");
      out.write("      font-size: 0.9rem;\r\n");
      out.write("      margin: 1rem 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-check input[type=\"checkbox\"] {\r\n");
      out.write("      transform: scale(1.2);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .btn-submit {\r\n");
      out.write("      background: var(--clr-btn);\r\n");
      out.write("      color: var(--clr-btn-text);\r\n");
      out.write("      padding: 0.8rem;\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 30px;\r\n");
      out.write("      font-size: 1rem;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      transition: 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .btn-submit:hover {\r\n");
      out.write("      background: transparent;\r\n");
      out.write("      color: var(--clr-btn-hover);\r\n");
      out.write("      border: 2px solid var(--clr-btn-hover);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-footer {\r\n");
      out.write("      margin-top: 1.2rem;\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      font-size: 0.9rem;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-footer a {\r\n");
      out.write("      color: #aad8d3;\r\n");
      out.write("      text-decoration: none;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .form-footer a:hover {\r\n");
      out.write("      text-decoration: underline;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <div class=\"register-box\">\r\n");
      out.write("    <h2>Register</h2>\r\n");
      out.write("    ");
 
String msg =(String)request.getAttribute("msg");
if(msg!=null){
	out.print(msg);
}

      out.write("\r\n");
      out.write("    <form action=\"newUser\" method=\"post\">\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <input type=\"email\" name=\"username\" placeholder=\"User-email\" name=\"username\" required />\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-group\">\r\n");
      out.write("        <input type=\"password\" name=\"password\" placeholder=\"Password\" name=\"password\" required />\r\n");
      out.write("      </div>\r\n");
      out.write("      <div class=\"form-check\">\r\n");
      out.write("        <input type=\"checkbox\" name=\"terms\" id=\"terms\" required />\r\n");
      out.write("        <label for=\"terms\">I agree to the <a href=\"#\">terms and conditions</a></label>\r\n");
      out.write("      </div>\r\n");
      out.write("      <button type=\"submit\" class=\"btn-submit\">Register</button>\r\n");
      out.write("    </form>\r\n");
      out.write("    <div class=\"form-footer\">\r\n");
      out.write("      Already have an account? <a href=\"login.jsp\">Log in</a>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
